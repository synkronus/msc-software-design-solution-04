@startuml PoliMarket_Deployment_Architecture

!theme plain
title PoliMarket - Arquitectura de Despliegue CBSE

!define FRONTEND #E3F2FD
!define BACKEND #F3E5F5
!define DATABASE #E8F5E8
!define INFRASTRUCTURE #FFF3E0

' Definición de nodos de infraestructura
node "Cliente Web Browser" as WebBrowser {
    [Angular App] as AngularApp <<Frontend>>
}

node "Cliente Mobile Device" as MobileDevice {
    [React App] as ReactApp <<Frontend>>
}

node "Load Balancer" as LB {
    [Nginx/IIS] as LoadBalancer <<Infrastructure>>
}

node "Application Server Cluster" as AppCluster {
    
    node "App Server 1" as Server1 {
        [PoliMarket.API] as API1 <<Backend>>
        
        package "Business Components" {
            [AutorizacionComponent] as Auth1 <<Component>>
            [VentasComponent] as Sales1 <<Component>>
            [InventarioComponent] as Inventory1 <<Component>>
        }
    }
    
    node "App Server 2" as Server2 {
        [PoliMarket.API] as API2 <<Backend>>
        
        package "Business Components" {
            [ProveedoresComponent] as Suppliers2 <<Component>>
            [EntregasComponent] as Delivery2 <<Component>>
            [NotificacionesComponent] as Notifications2 <<Component>>
        }
    }
}

node "Database Cluster" as DBCluster {
    database "Primary DB" as PrimaryDB {
        [SQL Server] as SQLServer <<Database>>
    }
    
    database "Read Replica" as ReplicaDB {
        [SQL Server Replica] as SQLReplica <<Database>>
    }
    
    database "Cache Layer" as CacheLayer {
        [Redis Cache] as Redis <<Cache>>
    }
}

node "Message Queue Cluster" as MQCluster {
    [Message Broker] as MessageBroker <<Infrastructure>>
    queue "Sales Queue" as SalesQueue
    queue "Inventory Queue" as InventoryQueue
    queue "Notifications Queue" as NotificationQueue
}

node "Monitoring & Logging" as Monitoring {
    [Application Insights] as AppInsights <<Monitoring>>
    [Serilog] as Logging <<Logging>>
    [Health Checks] as HealthChecks <<Monitoring>>
}

node "External Services" as External {
    [Payment Gateway] as PaymentGW <<External>>
    [Email Service] as EmailService <<External>>
    [SMS Service] as SMSService <<External>>
}

' Conexiones de red
WebBrowser --> LoadBalancer : HTTPS/443
MobileDevice --> LoadBalancer : HTTPS/443

LoadBalancer --> API1 : HTTP/80
LoadBalancer --> API2 : HTTP/80

API1 --> SQLServer : TCP/1433
API2 --> SQLServer : TCP/1433

API1 --> Redis : TCP/6379
API2 --> Redis : TCP/6379

SQLServer --> SQLReplica : Replication

Auth1 --> MessageBroker : AMQP/5672
Sales1 --> MessageBroker : AMQP/5672
Inventory1 --> MessageBroker : AMQP/5672

MessageBroker --> SalesQueue
MessageBroker --> InventoryQueue
MessageBroker --> NotificationQueue

Notifications2 --> EmailService : HTTPS/443
Notifications2 --> SMSService : HTTPS/443

Sales1 --> PaymentGW : HTTPS/443

API1 --> AppInsights : HTTPS/443
API2 --> AppInsights : HTTPS/443

' Notas de configuración
note right of AppCluster
    **Configuración de Cluster:**
    - 2+ instancias para alta disponibilidad
    - Load balancing round-robin
    - Health checks cada 30 segundos
    - Auto-scaling basado en CPU/memoria
end note

note right of DBCluster
    **Configuración de Base de Datos:**
    - Primary-Replica setup
    - Backup automático cada 6 horas
    - Connection pooling habilitado
    - Índices optimizados para consultas
end note

note right of MQCluster
    **Message Queue Configuration:**
    - Persistent queues para reliability
    - Dead letter queues para errores
    - TTL configurado por tipo de mensaje
    - Monitoring de queue depth
end note

' Especificaciones de deployment
note as DeploymentSpecs
    **Especificaciones de Despliegue**
    
    **Frontend:**
    • Angular: ng build --prod
    • React: npm run build
    • CDN: Static files distribution
    • PWA: Service worker enabled
    
    **Backend:**
    • .NET: dotnet publish -c Release
    • Docker: Multi-stage build
    • Health checks: /health endpoint
    • Graceful shutdown: 30s timeout
    
    **Database:**
    • Connection pooling: 100 connections
    • Query timeout: 30 seconds
    • Backup retention: 30 days
    • Encryption: TDE enabled
    
    **Monitoring:**
    • Metrics: CPU, Memory, Disk, Network
    • Logs: Structured JSON format
    • Alerts: Email + SMS notifications
    • Dashboards: Real-time monitoring
end note

' Configuración de seguridad
note as SecurityConfig
    **Configuración de Seguridad**
    
    **Network Security:**
    • HTTPS/TLS 1.3 obligatorio
    • WAF (Web Application Firewall)
    • DDoS protection habilitado
    • IP whitelisting para admin
    
    **Application Security:**
    • JWT tokens con RS256
    • CORS configurado restrictivamente
    • Rate limiting por IP/usuario
    • Input validation en todos los endpoints
    
    **Data Security:**
    • Encryption at rest (AES-256)
    • Encryption in transit (TLS 1.3)
    • PII data masking en logs
    • GDPR compliance habilitado
end note

' Estrategia de escalabilidad
note as ScalabilityStrategy
    **Estrategia de Escalabilidad**
    
    **Horizontal Scaling:**
    • Auto-scaling groups
    • Container orchestration
    • Database read replicas
    • CDN para contenido estático
    
    **Vertical Scaling:**
    • CPU/Memory monitoring
    • Automatic resource adjustment
    • Performance profiling
    • Capacity planning
    
    **Caching Strategy:**
    • Redis para session data
    • Application-level caching
    • Database query caching
    • CDN edge caching
end note

@enduml
