@startuml Observer_Pattern_Detail

!theme plain
skinparam dpi 300
skinparam classAttributeIconSize 0
skinparam classFontSize 11
skinparam packageStyle rectangle

title Observer Pattern - PoliMarket Event System

' Definición de colores
!define OBSERVER_PATTERN #E6FFE6
!define SUBJECT_CLASS #FFE6E6
!define INTEGRATION #F0F8FF

' ========== OBSERVER PATTERN ==========
package "Observer Pattern" OBSERVER_PATTERN {
    interface IEventPublisher <<Subject>> {
        + subscribe(observer: IEventObserver): void
        + unsubscribe(observer: IEventObserver): void
        + notifyObservers(event: ComponentEvent): void
        + publishEvent(event: ComponentEvent): void
        + getSubscriberCount(): Integer
        + getEventHistory(): List<ComponentEvent>
    }
    
    interface IEventObserver <<Observer>> {
        + update(event: ComponentEvent): void
        + getObserverType(): String
        + isInterestedIn(eventType: String): Boolean
        + getSubscribedEvents(): List<String>
        + handleError(event: ComponentEvent, error: Exception): void
    }
    
    class EventManager <<Concrete Subject>> {
        - observers: Map<String, List<IEventObserver>>
        - eventHistory: List<ComponentEvent>
        - maxHistorySize: Integer
        - eventFilters: Map<String, EventFilter>
        + subscribe(observer: IEventObserver): void
        + unsubscribe(observer: IEventObserver): void
        + subscribeToEventType(observer: IEventObserver, eventType: String): void
        + notifyObservers(event: ComponentEvent): void
        + publishEvent(event: ComponentEvent): void
        + getSubscriberCount(): Integer
        + getEventHistory(): List<ComponentEvent>
        - filterObservers(event: ComponentEvent): List<IEventObserver>
        - addToHistory(event: ComponentEvent): void
        - validateEvent(event: ComponentEvent): Boolean
    }
    
    class ComponentEvent <<Event>> {
        - eventId: String
        - eventType: String
        - source: String
        - timestamp: Date
        - data: Map<String, Object>
        - priority: EventPriority
        - correlationId: String
        + getEventId(): String
        + getEventType(): String
        + getSource(): String
        + getData(): Map<String, Object>
        + getTimestamp(): Date
        + getPriority(): EventPriority
        + getCorrelationId(): String
        + addData(key: String, value: Object): void
    }
    
    enum EventPriority {
        LOW
        NORMAL
        HIGH
        CRITICAL
    }
}

' ========== CONCRETE OBSERVERS ==========
package "Concrete Observers" OBSERVER_PATTERN {
    class InventoryObserver <<Concrete Observer>> {
        - inventoryComponent: IInventarioComponent
        - stockThresholds: Map<String, Integer>
        - alertService: IAlertService
        + update(event: ComponentEvent): void
        + getObserverType(): String
        + isInterestedIn(eventType: String): Boolean
        + getSubscribedEvents(): List<String>
        + handleError(event: ComponentEvent, error: Exception): void
        - handleProductSold(event: ComponentEvent): void
        - handleStockUpdate(event: ComponentEvent): void
        - handleProductCreated(event: ComponentEvent): void
        - checkStockLevels(productId: String): void
        - generateStockAlert(productId: String, currentStock: Integer): void
    }
    
    class NotificationObserver <<Concrete Observer>> {
        - notificationService: INotificacionesComponent
        - emailService: IEmailService
        - smsService: ISMSService
        - notificationTemplates: Map<String, NotificationTemplate>
        + update(event: ComponentEvent): void
        + getObserverType(): String
        + isInterestedIn(eventType: String): Boolean
        + getSubscribedEvents(): List<String>
        + handleError(event: ComponentEvent, error: Exception): void
        - handleSaleCompleted(event: ComponentEvent): void
        - handleStockAlert(event: ComponentEvent): void
        - handleUserRegistration(event: ComponentEvent): void
        - sendNotification(recipient: String, template: NotificationTemplate, data: Map<String, Object>): void
    }
    
    class AuditObserver <<Concrete Observer>> {
        - auditService: IAuditService
        - auditRepository: IAuditRepository
        - securityService: ISecurityService
        + update(event: ComponentEvent): void
        + getObserverType(): String
        + isInterestedIn(eventType: String): Boolean
        + getSubscribedEvents(): List<String>
        + handleError(event: ComponentEvent, error: Exception): void
        - handleSecurityEvent(event: ComponentEvent): void
        - handleDataModification(event: ComponentEvent): void
        - handleUserAction(event: ComponentEvent): void
        - createAuditRecord(event: ComponentEvent): AuditRecord
        - checkSecurityViolation(event: ComponentEvent): Boolean
    }
    
    class ReportingObserver <<Concrete Observer>> {
        - reportingService: IReportingService
        - analyticsService: IAnalyticsService
        - dataWarehouse: IDataWarehouse
        + update(event: ComponentEvent): void
        + getObserverType(): String
        + isInterestedIn(eventType: String): Boolean
        + getSubscribedEvents(): List<String>
        + handleError(event: ComponentEvent, error: Exception): void
        - handleSalesEvent(event: ComponentEvent): void
        - handleInventoryEvent(event: ComponentEvent): void
        - updateAnalytics(event: ComponentEvent): void
        - generateRealTimeReport(eventType: String): void
    }
}

' ========== INTEGRATION WITH EXISTING SYSTEM ==========
package "System Integration" INTEGRATION {
    class ProductosComponent <<Event Publisher>> {
        - eventManager: EventManager
        - configManager: ConfigurationManager
        + createProduct(request: CreateProductRequest): ApiResponse<Producto>
        + updateProduct(id: String, product: Producto): ApiResponse<Producto>
        + deleteProduct(id: String): ApiResponse<Boolean>
        - publishProductCreated(product: Producto): void
        - publishProductUpdated(product: Producto): void
        - publishProductDeleted(productId: String): void
        - createProductEvent(eventType: String, product: Producto): ComponentEvent
    }
    
    class VentasComponent <<Event Publisher>> {
        - eventManager: EventManager
        - configManager: ConfigurationManager
        + processSale(request: CreateSaleRequest): ApiResponse<SaleProcessingResponse>
        + cancelSale(saleId: String): ApiResponse<Boolean>
        - publishSaleProcessed(sale: Venta): void
        - publishSaleCancelled(saleId: String): void
        - publishPaymentReceived(payment: Payment): void
        - createSaleEvent(eventType: String, sale: Venta): ComponentEvent
    }
    
    class InventarioComponent <<Event Publisher & Observer>> {
        - eventManager: EventManager
        - inventoryObserver: InventoryObserver
        + updateStock(request: StockUpdateRequest): ApiResponse<StockUpdateResponse>
        + checkAvailability(request: AvailabilityCheckRequest): ApiResponse<AvailabilityResponse>
        - publishStockUpdated(productId: String, newStock: Integer): void
        - publishStockAlert(productId: String, currentStock: Integer): void
        - handleSaleEvent(event: ComponentEvent): void
        - createStockEvent(eventType: String, productId: String, stock: Integer): ComponentEvent
    }
    
    class IntegracionComponent <<Event Hub>> {
        - eventManager: EventManager
        - allObservers: List<IEventObserver>
        + initializeEventSystem(): void
        + registerObserver(observer: IEventObserver): void
        + publishSystemEvent(event: ComponentEvent): void
        + getSystemHealth(): SystemHealthStatus
        - setupEventSubscriptions(): void
        - monitorEventFlow(): void
    }
}

' ========== RELATIONSHIPS ==========

' Observer Pattern Relationships
IEventPublisher <|.. EventManager
IEventObserver <|.. InventoryObserver
IEventObserver <|.. NotificationObserver
IEventObserver <|.. AuditObserver
IEventObserver <|.. ReportingObserver

' Event Management
EventManager o-- IEventObserver
EventManager ..> ComponentEvent : publishes
ComponentEvent --> EventPriority : uses

' System Integration - Publishers
ProductosComponent --> EventManager : publishes to
VentasComponent --> EventManager : publishes to
InventarioComponent --> EventManager : publishes to
IntegracionComponent --> EventManager : manages

' System Integration - Observers
InventoryObserver --> IInventarioComponent : updates
NotificationObserver --> INotificacionesComponent : notifies
AuditObserver --> IAuditService : logs
ReportingObserver --> IReportingService : reports

' Event Flow
EventManager --> InventoryObserver : notifies
EventManager --> NotificationObserver : notifies
EventManager --> AuditObserver : notifies
EventManager --> ReportingObserver : notifies

' ========== PATTERN BENEFITS ==========
note as PatternBenefits
    **Observer Pattern Benefits**
    
    ✅ **Loose Coupling**: Publishers don't know about specific observers
    ✅ **Dynamic Relationships**: Observers can be added/removed at runtime
    ✅ **Broadcast Communication**: One event notifies multiple observers
    ✅ **Extensibility**: New observers without modifying publishers
    ✅ **Event History**: Complete audit trail of system events
    ✅ **Filtered Subscriptions**: Observers only receive relevant events
    
    **Business Value**:
    • Real-time inventory monitoring
    • Automated customer notifications
    • Comprehensive audit logging
    • Business intelligence and reporting
    • System health monitoring
end note

' ========== USAGE EXAMPLE ==========
note as UsageExample
    **Usage Example**:
    
    ```csharp
    // Publisher (VentasComponent)
    var saleEvent = new ComponentEvent {
        eventType = "SaleCompleted",
        source = "VentasComponent",
        data = new Dictionary<string, object> {
            ["saleId"] = sale.Id,
            ["customerId"] = sale.CustomerId,
            ["total"] = sale.Total
        }
    };
    eventManager.publishEvent(saleEvent);
    
    // Observers automatically receive and process the event
    // - InventoryObserver updates stock
    // - NotificationObserver sends receipt
    // - AuditObserver logs transaction
    // - ReportingObserver updates analytics
    ```
end note

PatternBenefits -[hidden]- UsageExample

@enduml
